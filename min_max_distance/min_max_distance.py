# -*- coding: utf-8 -*-
"""
/***************************************************************************
 minMaxDistance
                                 A QGIS plugin
 This plugin finds the minumum and maximumum distance between features
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-11-01
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Metehan Ergen / Hacettepe University
        email                : metehan.ergenn@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.core import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .min_max_distance_dialog import minMaxDistanceDialog
import os.path


class minMaxDistance:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'minMaxDistance_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Min Max Distance')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('minMaxDistance', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/min_max_distance/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Find min and max distances'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Min Max Distance'),
                action)
            self.iface.removeToolBarIcon(action)

    def load_comboBox(self):
        """Load the fields into combobox when layers are changed"""
        layers_shp = []
        
       
        layers = [layer for layer in QgsProject.instance().mapLayers().values()]
        if len(layers) != 0:  # checklayers exist in the project
            for layer in layers:
                if hasattr(layer, "dataProvider"):  # to not consider Openlayers basemaps in the layer list
                    myfilepath = layer.dataProvider().dataSourceUri()  # directory including filename
                    (myDirectory, nameFile) = os.path.split(myfilepath)  # splitting into directory and filename
                    #if (".shp" in nameFile):
                    try:
                        if layer.geometryType() == 0:
                            layers_shp.append(layer)    # Exception for OSM base map (Raster)
                    except:
                        continue
                
  
        self.selectedLayerIndex = self.dlg.comboBox.currentIndex()
      
        
        if self.selectedLayerIndex < 0 or self.selectedLayerIndex > len(layers_shp):
            return
        try:
            
            self.selectedLayer = layers_shp[self.selectedLayerIndex]
            
        except:
            return
    
        print(self.selectedLayer.name())
    def loadLayerList(self):
   
        layersList = []
        layersList_shp = []
        # Show the shapefiles in the ComboBox
        layers = [layer for layer in QgsProject.instance().mapLayers().values()]
        if len(layers) != 0:  # checklayers exist in the project
            for layer in layers:
                if hasattr(layer, "dataProvider"):  # to not consider Openlayers basemaps in the layer list
                    myfilepath = layer.dataProvider().dataSourceUri()  # directory including filename
                    (myDirectory, nameFile) = os.path.split(myfilepath)  # splitting into directory and filename
                    #if (".shp" in nameFile):
                    try:
                        if layer.geometryType() == 0:               # Exception for OSM base map (Raster)
                            layersList.append(layer.name())
                            layersList_shp.append(layer)
                    except:
                        continue
                  
            # Layer lists
            self.dlg.comboBox.addItems(layersList)
         
            # Point and Polygon layer indexes
            self.selectedLayerIndex = self.dlg.comboBox.currentIndex()
        
            if self.selectedLayerIndex < 0 or self.selectedLayerIndex > len(layersList_shp):
                return

            # Selected layers
            self.selectedLayer = layersList_shp[self.selectedLayerIndex]

            fieldNamesLayer = [field.name() for field in self.selectedLayer.fields()]
           
            
            return [layers, layersList_shp, fieldNamesLayer]
        else: 
            return [layers, False]
        
    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, "Select output file ")
        self.dlg.lineEdit.setText(filename)  

            
    def clear_ui(self): 
        """Clearing the UI for new operations"""
        self.dlg.comboBox.clear()
        self.dlg.lineEdit.clear()

    def error_msg(self,text):
        QMessageBox.warning(self.dlg.show(), self.tr("Corridor Detection:Warning"),
                            self.tr(str(text)), QMessageBox.Ok ) 

    def runAlgorithm(self):
        

        points = [feat for feat in self.selectedLayer.getFeatures()]


        minDistance = 99999999
        maxDistance = 0
        for x,point in enumerate(points):
            point_geom = point.geometry() #Input geometry
            for y,pointSearched in enumerate(points):
                pointSearched_geom = pointSearched.geometry()
                if not x == y: # Could be done by feature id's (do not know which one gives the best performance)
                    distance = point_geom.distance(pointSearched_geom)
                    if distance > maxDistance:
                        maxDistance = distance
                        maxDistFeatures = [point,pointSearched]
                    if distance < minDistance and not distance < 0:
                        minDistance = distance
                        minDistFeatures = [point,pointSearched]
        
        if len(maxDistFeatures) > 1 and len(minDistFeatures) > 1:
            
            self.v_layer = QgsVectorLayer("MultiLineString", "lines","memory")
            pr = self.v_layer.dataProvider()
            attr = pr.addAttributes([QgsField('startPoint_ID', QVariant.Int),QgsField('endPoint_ID', QVariant.Int),QgsField('segment_length', QVariant.Double)])
            self.v_layer.updateFields()
            fields = self.v_layer.fields()
            
            
            for i in range(len(maxDistFeatures)-1):
                lineStart = maxDistFeatures[i].geometry().get()
                lineEnd = maxDistFeatures[i+1].geometry().get()
                segMax = QgsFeature()
                segMax.setFields(fields, True)
                segMax.setGeometry(QgsGeometry.fromPolyline([lineStart, lineEnd]))
                segMax.setAttributes([maxDistFeatures[i]["id"],maxDistFeatures[i+1]["id"],maxDistance ])
                
            for i in range(len(minDistFeatures)-1):
                lineStart = minDistFeatures[i].geometry().get()
                lineEnd = minDistFeatures[i+1].geometry().get()
                segMin = QgsFeature()
                segMin.setFields(fields, True)
                segMin.setGeometry(QgsGeometry.fromPolyline([lineStart, lineEnd]))
                segMin.setAttributes([minDistFeatures[i]["id"],minDistFeatures[i+1]["id"],minDistance] )

            

            pr.addFeatures( [ segMax ] )
            pr.addFeatures( [ segMin ] )

            self.v_layer.updateExtents()
            QgsProject.instance().addMapLayers([self.v_layer])
            # add the line to
            #QgsProject.instance().addMapLayers([self.v_layer]) to add it on iface
           
        
        """            
        print("max: ", maxDistance)
        print("min :",minDistance)
        print(minDistFeatures)
        print(maxDistFeatures)
        """

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = minMaxDistanceDialog()
            print("ok")
            self.dlg.comboBox.currentIndexChanged.connect(lambda: self.load_comboBox())
            self.dlg.toolButton.clicked.connect(self.select_output_file)
            self.dlg.pushButton.clicked.connect(self.runAlgorithm)

        self.clear_ui()

        layers, layers_shp, fieldNamesLayer = self.loadLayerList()
        if len(layers) == 0:
            return

        # show the dialog
        self.dlg.show()
        
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            if not len(self.dlg.lineEdit.text()) < 3:
                QgsVectorFileWriter.writeAsVectorFormat(self.v_layer, self.dlg.lineEdit.text(), "UTF-8", self.selectedLayer.crs(), "ESRI Shapefile")
            else:
                self.error_msg("Select the output directory!")
                return False
            
